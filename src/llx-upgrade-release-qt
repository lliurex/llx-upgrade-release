#!/usr/bin/python3
# Copyright (c) 2023 LliureX Team
# This code is released under the GPL-3 terms
# https://www.gnu.org/licenses/gpl-3.0.en.html#license-text

import os,sys,subprocess,time
from i18n import i18n
import llxupgrader
from PySide6.QtWidgets import QApplication, QLabel, QWidget, QPushButton,QGridLayout,QListWidget,QTextEdit, QCheckBox,QListWidgetItem,QSizePolicy,QProgressBar
from PySide6 import QtGui
from PySide6.QtCore import QSize,Qt,QThread,Signal,QObject

class thProgress(QThread): 
	end=Signal()
	disabled=Signal()
	downgraded=Signal()
	progress=Signal(int)
	def __init__(self,parent=None):
		super (thProgress,self).__init__(parent)
		self.prg=""
		self.prgValue=100
	#def __init__

	def setPrg(self,prg):
		self.prg=prg
	#def setPrg

	def setValue(self,value):
		self.prgValue=value
	#def setValue

	def run(self):
		val=0
		errinc=0
		repodir="/usr/share/llx-upgrade-release/repo"
		repoerr="/usr/share/llx-upgrade-release/err"
		if os.path.exists(repodir)==False:
			os.makedirs(repodir)
		else:
			for f in os.listdir(repodir):
				if f.endswith("deb"):
					try:
						os.unlink(os.path.join(repodir,f))
					except:
						pass
		while val<self.prgValue:
			if os.path.isfile(repoerr):
				try:
					with open(repoerr,"r") as f:
						errinc=f.read().strip()
						if errinc.isdigit()==False:
							errinc=0
				except:
					pass
			val=len(os.listdir(repodir))+int(errinc)
			if val>=self.prgValue+1:
				val=self.prgValue
			self.progress.emit(val)
			time.sleep(1)
		return(True)
	#def run
#class thProgress

class thRun(QThread): 
	end=Signal()
	disabled=Signal()
	downgraded=Signal()
	downloaded=Signal()
	currentstate=Signal(int)
	newstate=Signal(int)
	def __init__(self,parent=None):
		super (thRun,self).__init__(parent)
		self.target=""
		self.upgradeTo=""

	def setTarget(self,target):
		self.target=target

	def run(self):
		if self.target=="disablerepos":
			llxupgrader.disableRepos()
			self.disabled.emit()
		if self.target=="doUpgrade":
			tools=llxupgrader.prepareFiles(self.upgradeTo)
			llxupgrader.enableUpgradeRepos(tools)
			pkgs=llxupgrader.getAllPackages()
			self.newstate.emit(len(pkgs))
			if len(pkgs):
			#pkgs=llxupgrader.getDependPkgs()
				llxupgrader.downloadPackages(pkgs)
				self.downloaded.emit()
				llxupgrader.generateLocalRepo(self.upgradeTo["Codename"])
				llxupgrader.setLocalRepo(self.upgradeTo["Codename"])
				codenamef="/tmp/.codename"
				with open(codename,"w") as f:
					f.write("{}:{}".format(self.updateTo["Dist"],self.updateTo["Codename"]))
			self.end.emit()
		if self.target=="downgrade":
			llxupgrader.downgrade()
			self.downgraded.emit()
		if self.target=="currentstate":
			pkgs=llxupgrader.upgradeCurrentState()
			self.currentstate.emit(len(pkgs))
		return(True)
#class thRun

class QProgressBar(QWidget):
	def __init__(self,parent=None):
		super (QProgressBar,self).__init__(parent)
		self.txt=QLabel()
		self.txt.setStyleSheet("color:white;padding:0px;border:0px;margin:1px")
		self.bkgImg=QLabel()
		self.img=QLabel()
		self.inc=1
		self.range=[0,1]
		self._renderGui()
		return

	def _renderGui(self):
		lay=QGridLayout()
		lay.addWidget(self.bkgImg,0,0,1,1)
		lay.addWidget(self.img,0,0,1,1)
		lay.addWidget(self.txt,0,0,1,1,Qt.AlignTop|Qt.AlignLeft)
		self.setLayout(lay)
		self.setStyleSheet("padding:0px;border:0px;margin:0px")

	def setRange(self,low,hi):
		self.range=[low,hi]
	#def setRange

	def setBkgImg(self,image):
		lay=self.layout()
		qimage=QtGui.QPixmap(image)
		qimage=qimage.scaled(self.width()-(7*lay.contentsMargins().left()),self.height()+(lay.contentsMargins().top()/2),Qt.IgnoreAspectRatio,Qt.TransformationMode.FastTransformation)
		self.bkgImg.setPixmap(qimage)
		#self.bkgImg.setStyleSheet("padding:0px;border:0px")
		self.bkgImg.setFixedSize(QSize(self.width()-(7*lay.contentsMargins().left()),self.bkgImg.height()))
		self.img.setFixedSize(QSize(0,self.bkgImg.height()))
		#self.bkgImg.setScaledContents(True)
	#def setBkgImg

	def setImg(self,image):
		lay=self.layout()
		qimage=QtGui.QPixmap(image)
		qimage=qimage.scaled(self.width()-(7*lay.contentsMargins().left()),self.height()+(lay.contentsMargins().top()/2),Qt.IgnoreAspectRatio,Qt.TransformationMode.FastTransformation)
		self.img.setPixmap(qimage)
		#self.img.setStyleSheet("padding:0px;border:0px")
		self.setFixedSize(QSize(self.bkgImg.width()-(1*lay.contentsMargins().left()),self.bkgImg.height()))
		#self.img.setScaledContents(True)
	#def setImg

	def setValue(self,value):
		if value>self.range[1]:
			return
		val=value*self.bkgImg.width()/self.range[1]
		self.img.setFixedSize(QSize(val/1,self.bkgImg.height()))
		if val>0:
			self.txt.setText("{}/{}".format(int(value),self.range[1]))
	#def setValue

	def setInc(self,inc):
		self.inc=inc
	#def setInc

	def setFinish(self):
		self.setValue(self.range[1])
		self.img.setFixedSize(QSize(self.bkgImg.width(),self.bkgImg.height()))
		self.txt.setText("100%")
		print("FINIsH")
	#def setFinish

class QStepLine(QWidget):
	clicked=Signal()
	def __init__(self,parent=None):
		super (QStepLine,self).__init__(parent)
		lay=QGridLayout()
		self.lbl_info=QLabel()
		self.lbl_info.setWordWrap(True)
		self.btn_ok=QPushButton(i18n("ACCEPT"))
		self.btn_ok.clicked.connect(self.emitOk)
		self.btn_ko=QPushButton(i18n("CANCEL"))
		self.btn_ko.clicked.connect(self.cancel)
		lay.addWidget(self.lbl_info,0,0,1,2)
		lay.addWidget(self.btn_ok,1,0,1,1,Qt.AlignLeft)
		lay.addWidget(self.btn_ko,1,1,1,1,Qt.AlignRight)
		self.setLayout(lay)
		self.prg=QProgressBar()
		lay.addWidget(self.prg,0,0,1,2,Qt.AlignLeft|Qt.AlignTop)
		self.prg.setVisible(False)
		return
	#def __init__

	def enableImg(self,image):
		self.prg.setVisible(True)
		self.prg.setValue(0)
		self.lbl_info.setVisible(False)

	def setText(self,msg):
		self.lbl_info.setText(msg)
	#def setText

	def emitOk(self):
		self.setDisabled(True)
		self.clicked.emit()
	#def emitOk

	def cancel(self):
		self.btn_ok.setDisabled(True)
	#def cancel
#class QStepLine

class upgraderGui(QWidget):
	def __init__(self,parent=None):
		super (upgraderGui,self).__init__(parent)
		self.upgradeTo=self.chkUpAvailable()
		self.packagesToUpdate=0
		self.th=thRun()
		self.thProgress=thProgress()
		self.th.upgradeTo=self.upgradeTo.copy()
		cursor=QtGui.QCursor(Qt.PointingHandCursor)
		self.setCursor(cursor)
		self.noreturn=0
	#def __init__

	def chkUpAvailable(self):
		return(llxupgrader.chkReleaseAvailable())
	#def chkUpAvailable

	def _launchUp(self):
		self.setVisible(False)
		cmd=["/usr/sbin/lliurex-up","-n"]
		subprocess.run(cmd)
		self.setVisible(True)
		self.lst_Steps.takeItem(self.lst_Steps.count()-1)
		self.beginUpgrade()
	#def self._launchUp

	def closeEvent(self,event):
		if self.noreturn==1:
			event.ignore()
	#def closeEvent

	def _close(self):
		self.setEnabled(False)
		self.noreturn=0
	#def _close

	def renderGui(self):
		lay=QGridLayout()
		self.setLayout(lay)
		self.lst_Steps=QListWidget()
		self.lst_Steps.currentRowChanged.connect(self._disableStep)
		banner=QStepLine()
		banner.enableImg("/usr/share/llx-upgrade-release/rsrc/bkg.png")
		banner.prg.setBkgImg("/usr/share/llx-upgrade-release/rsrc/dark_llx25.jpg")
		banner.prg.setImg("/usr/share/llx-upgrade-release/rsrc/1024x768_llx25.jpg")
		banner.btn_ok.setVisible(False)
		banner.btn_ko.setVisible(False)
		itemb = QListWidgetItem(self.lst_Steps)
		self.lst_Steps.addItem(itemb)
		self.lst_Steps.setItemWidget(itemb,banner)
		lbl_info=QStepLine()
		lbl_info.btn_ok.setEnabled(False)
		lbl_info.btn_ko.clicked.connect(self._close)
		lay.addWidget(self.lst_Steps,0,0,1,2)
		self.chk_sure=QCheckBox(i18n("DISCLAIMERGUI"))
		self.chk_sure.stateChanged.connect(lambda x:lbl_info.btn_ok.setEnabled(self.chk_sure.isChecked()))
		lay.addWidget(self.chk_sure,3,0,1,2,Qt.AlignLeft)
		if self.upgradeTo:
			lbl_info.setText("<i>{0}: {1}</i><p><b>{3}</b></p>".format(i18n("AVAILABLE"),self.upgradeTo["Name"].split(":")[1].strip(),i18n("ASK"),i18n("DISMISS")))
			lbl_info.clicked.connect(self.beginUpgrade)
		else:
			lbl_info.setText("<i>{0}</i>".format(i18n("NOAVAILABLE")))
			lbl_info.clicked.connect(self._close)
			self.chk_sure.setEnabled(False)
		item = QListWidgetItem(self.lst_Steps)
		self.lst_Steps.addItem(item)
		self.lst_Steps.setItemWidget(item,lbl_info)
		itemb.setSizeHint(QSize(lbl_info.width(), lbl_info.height()))
		item.setSizeHint(QSize(lbl_info.width(), lbl_info.height()))
		self.setFixedSize(QSize(self.lst_Steps.width(),self.lst_Steps.height()))
	#def renderGui

	def beginUpgrade(self):
		self.chk_sure.setDisabled(True)
		cursor=QtGui.QCursor(Qt.WaitCursor)
		self.setCursor(cursor)
		self.th.setTarget("currentstate")
		self.th.currentstate.connect(self._endBeginUpgrade)
		self.th.start()
		self.noreturn=1	
	#def beginUpgrade

	def _endBeginUpgrade(self,packages):
		cursor=QtGui.QCursor(Qt.PointingHandCursor)
		self.setCursor(cursor)
		item = QListWidgetItem(self.lst_Steps)
		lbl_info=QStepLine()
		self.lst_Steps.addItem(item)
		self.lst_Steps.setItemWidget(item,lbl_info)
		self.lst_Steps.setCurrentItem(item)
		self.packagesToUpdate=packages
		lbl_info.btn_ko.clicked.connect(self._close)
		if self.packagesToUpdate>0:
			self.noreturn=0
			lbl_info.btn_ok.setVisible(True)
			lbl_info.btn_ko.setVisible(False)
			lbl_info.setText((i18n("PENDING")))
			lbl_info.clicked.connect(self._launchUp)
		else:
			lbl_info.setText("<p>{0}</p><p>{1}</p><p><b>{2}</b></p>".format(i18n("DISABLE"),i18n("DEFAULT"),i18n("UNDO")))
			lbl_info.clicked.connect(self._doUpgrade)
		item.setSizeHint(QSize(lbl_info.lbl_info.width(), lbl_info.sizeHint().height()))
	#def _endBeginUpgrade

	def _doUpgrade(self):
		item = QListWidgetItem(self.lst_Steps)
		lbl_info=QStepLine()
		lbl_info.setText(i18n("SETTINGUP"))
		lbl_info.btn_ok.setVisible(False)
		lbl_info.btn_ko.setVisible(False)
		self.lst_Steps.addItem(item)
		self.lst_Steps.setItemWidget(item,lbl_info)
		self.lst_Steps.setCurrentItem(item)
		item.setSizeHint(QSize(lbl_info.lbl_info.width(), lbl_info.sizeHint().height()))
		try:
			cursor=QtGui.QCursor(Qt.WaitCursor)
			self.setCursor(cursor)
			self.th.setTarget("disablerepos")
			self.th.start()
			self.th.disabled.connect(self._beginLastStepUpgrade)
			self.noreturn=1	
		except Exception as e:
			print(e)
			lbl_info.setText("{}".format(e))
			item.setSizeHint(QSize(lbl_info.lbl_info.width(), lbl_info.sizeHint().height()))
			return(False)
	#def _doUpgrade

	def _beginLastStepUpgrade(self):
		cursor=QtGui.QCursor(Qt.PointingHandCursor)
		self.setCursor(cursor)
		item = QListWidgetItem(self.lst_Steps)
		lbl_info=QStepLine()
		lbl_info.setText("{0}<br>{1}".format(i18n("LASTCHANCE"),i18n("DISMISS")))
		lbl_info.clicked.connect(self._doLastStepUpgrade)
		lbl_info.btn_ko.clicked.connect(self._revertAll)
		self.lst_Steps.addItem(item)
		self.lst_Steps.setItemWidget(item,lbl_info)
		item.setSizeHint(QSize(lbl_info.lbl_info.width(), lbl_info.sizeHint().height()))
		self.lst_Steps.setCurrentItem(item)
	#def _beginLastStepUpgrade

	def _doLastStepUpgrade(self):
		item = QListWidgetItem(self.lst_Steps)
		lbl_info=QStepLine()
		lbl_info.setText(i18n("SETTINGUP"))
		lbl_info.btn_ok.setVisible(False)
		lbl_info.btn_ko.setVisible(False)
		self.lst_Steps.addItem(item)
		self.lst_Steps.setItemWidget(item,lbl_info)
		self.lst_Steps.setCurrentItem(item)
		item.setSizeHint(QSize(lbl_info.lbl_info.width(), lbl_info.sizeHint().height()))
		cursor=QtGui.QCursor(Qt.WaitCursor)
		self.setCursor(cursor)
		self.th.setTarget("doUpgrade")
		self.th.newstate.connect(self._doProgress)
		self.th.downloaded.connect(self._endDownload)
		self.th.end.connect(self._endUpgrade)
		self.th.start()
		self.noreturn=1	
	#def _doLastStepUpgrade

	def _doProgress(self,packages):
		self.packagesToUpdate=packages
		item=self.lst_Steps.item(0)
		wdg=self.lst_Steps.itemWidget(item)
		self.lst_Steps.setCurrentItem(item)
		wdg.prg.setRange(0,self.packagesToUpdate+1)
		self.thProgress.setValue(self.packagesToUpdate)
		self.thProgress.setPrg(wdg.prg)
		self.thProgress.progress.connect(self._updatePrg)
		self.thProgress.start()
	#def _doProgress
		
	def _endDownload(self):
		bitem=self.lst_Steps.item(0)
		wdg=self.lst_Steps.itemWidget(bitem)
		self.thProgress.prgValue=1
		wdg.prg.setFinish()
		item = QListWidgetItem(self.lst_Steps)
		lbl_info=QStepLine()
		lbl_info.setText(i18n("SETTINGUP"))
		lbl_info.btn_ok.setVisible(False)
		lbl_info.btn_ko.setVisible(False)
		self.lst_Steps.addItem(item)
		self.lst_Steps.setItemWidget(item,lbl_info)
		self.lst_Steps.setCurrentItem(item)
	#def _endDownload

	def _endUpgrade(self):
		item = QListWidgetItem(self.lst_Steps)
		lbl_info=QStepLine()
		lbl_info.clicked.connect(self._launch)
		#if self.packagesToUpdate>len(os.listdir("/usr/share/llx-upgrade-release/repo")) or self.packagesToUpdate==0:
		if  self.packagesToUpdate==0:
			print("ERROR")
			print("Pkgs tp update: {}".format(self.packagesToUpdate))
			print("Pkgs downloaded: {}".format(len(os.listdir("/usr/share/llx-upgrade-release/repo"))))
			lbl_info.setText("{0}<br>{1}".format(i18n("REBOOT_KO"),i18n("REBOOT_KO1")))
			lbl_info.btn_ko.clicked.connect(self._beginUpgradeFailed)
			lbl_info.btn_ok.setVisible(False)
			lbl_info.btn_ko.setVisible(True)
		else:
			llxupgrader.setSystemdUpgradeTarget()
			#llxupgrader.upgradeLlxUp(self.upgradeTo)
			lbl_info.setText("{0}<br>{1}<p>{2}</p>".format(i18n("REBOOT"),i18n("REBOOT1"),i18n("END")))
			lbl_info.btn_ok.setVisible(True)
			lbl_info.btn_ko.clicked.connect(self._close)
		cursor=QtGui.QCursor(Qt.PointingHandCursor)
		self.setCursor(cursor)
		self._updatePrg(self.packagesToUpdate+1)
		self.noreturn=0
		self.lst_Steps.addItem(item)
		self.lst_Steps.setItemWidget(item,lbl_info)
		item.setSizeHint(QSize(lbl_info.lbl_info.width(), lbl_info.sizeHint().height()))
		self.lst_Steps.setCurrentItem(item)
	#def _endUpgrade

	def _revertAll(self):
		llxupgrader.restoreRepos()
		item = QListWidgetItem(self.lst_Steps)
		lbl_info=QStepLine()
		lbl_info.btn_ko.setVisible(False)
		lbl_info.clicked.connect(self._launchUp)
		msg=[i18n("ABORT"),i18n("REVERT"),i18n("RECOM")]
		lbl_info.setText("<br><br>".join(msg))
		self.lst_Steps.addItem(item)
		self.lst_Steps.setItemWidget(item,lbl_info)
		item.setSizeHint(QSize(lbl_info.lbl_info.width(), lbl_info.sizeHint().height()))
		self.lst_Steps.setCurrentItem(item)
		self.noreturn=0
	#def _revertAll

	def _endUpgradeFailed(self):
		cursor=QtGui.QCursor(Qt.PointingHandCursor)
		self.setCursor(cursor)
		item = QListWidgetItem(self.lst_Steps)
		lbl_info=QStepLine()
		lbl_info.btn_ko.setVisible(False)
		lbl_info.btn_ok.setVisible(False)
		lbl_info.setText("<p><pre>{}</pre></p><p><b>{}</b></p>".format(i18n("PRAY"),i18n("PRAY2")))
		self.lst_Steps.addItem(item)
		self.lst_Steps.setItemWidget(item,lbl_info)
		item.setSizeHint(QSize(lbl_info.lbl_info.width(), lbl_info.sizeHint().height()))
		self.lst_Steps.setCurrentItem(item)
		self.noreturn=0

	def _beginUpgradeFailed(self):
		self._revertAll()
		self.noreturn=1
		item=self.lst_Steps.currentItem()
		wdg=self.lst_Steps.itemWidget(item)
		wdg.btn_ok.setVisible(False)
		
		item = QListWidgetItem(self.lst_Steps)
		lbl_info=QStepLine()
		lbl_info.btn_ko.setVisible(False)
		lbl_info.btn_ok.setVisible(False)
		lbl_info.setText("<br>{}<br>".format(i18n("DOWNGRADE")))
		self.lst_Steps.addItem(item)
		self.lst_Steps.setItemWidget(item,lbl_info)
		item.setSizeHint(QSize(lbl_info.lbl_info.width(), lbl_info.sizeHint().height()))
		self.lst_Steps.setCurrentItem(item)
		cursor=QtGui.QCursor(Qt.WaitCursor)
		self.setCursor(cursor)
		self.th.setTarget("downgrade")
		self.th.start()
		self.th.downgraded.connect(self._endUpgradeFailed)
	#def _beginUpgradeFailed

	def _launch(self):
		cmd=["systemctl","isolate","llx-upgrade"]
		subprocess.run(cmd)
		sys.exit()

	def _updatePrg(self,val):
		item=self.lst_Steps.item(0)
		wdg=self.lst_Steps.itemWidget(item)
		wdg.prg.setValue(val)
	#def _updatePrg

	def _disableStep(self,*args):
		if self.lst_Steps.currentRow()>1:
			item=self.lst_Steps.item(self.lst_Steps.currentRow()-1)
			wdg=self.lst_Steps.itemWidget(item)
			wdg.setEnabled(False)
	#def _disableStep

#class upgraderGui

##### MAIN APP ######

if os.geteuid()!=0:
	cmd=["kdialog","--error",i18n("ROOT"),"--title","Error"]
	subprocess.run(cmd)
	sys.exit(10)
app=QApplication(["Lliurex Release Upgrade"])
rsrcdir=os.path.abspath(os.path.dirname(__file__))
app.setWindowIcon(QtGui.QIcon(os.path.join(rsrcdir,"llxupgrader.png")))
gui=upgraderGui()
gui.renderGui()
gui.show()
app.exec()
